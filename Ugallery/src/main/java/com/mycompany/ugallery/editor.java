package com.mycompany.ugallery;


import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
public class editor extends javax.swing.JFrame {
public static String filePath = "";
public static String name = "";
    public editor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Seleccionar imagen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Editor");

        jLabel2.setText("ruta");

        jButton2.setText("JPEG a BMG y viceversa");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Copia JPEG");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("RGB sepia");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Modificar imagen");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("B&W");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame();
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(frame);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            filePath = chooser.getSelectedFile().getAbsolutePath();       
            name = chooser.getSelectedFile().getName();
            jLabel2.setText(filePath);
            /*try{
            filePath(0, jLabel3);
            }catch(IOException ex) {
            Logger.getLogger(biblioteca.class.getName()).log(Level.SEVERE, null, ex);
            }*/     
     }else {
            System.out.println("No se ha seleccionado ningún archivo.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try{
            BufferedImage jpegImage = ImageIO.read(new File(filePath));
            String nameImage = name.replaceAll(".jpg", "");
            System.out.println(nameImage);
            String ruta = filePath.replaceAll(nameImage, "converted-"+nameImage + ".bmp").replaceAll(".jpg", "");
            System.out.println("Nueva imagen " + ruta);
            ImageIO.write(jpegImage, "bmp", new File(ruta));
            BufferedImage bmpImage = ImageIO.read(new File(filePath));
            String ruta2 = filePath.replaceAll(nameImage, "converted-"+nameImage);
            System.out.println("Nueva imagen jpg " + ruta2);
            ImageIO.write(bmpImage, "jpeg", new File(ruta2));
        }catch(IOException ex){
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            BufferedImage jpegImage = ImageIO.read(new File(filePath));
            String nameImage = name.replaceAll(".jpg", "");
            System.out.println(nameImage);
            String ruta = filePath.replaceAll(nameImage, "converted-"+nameImage + ".bmp").replaceAll(".jpg", "");
            ImageIO.write(jpegImage, "bmp", new File(ruta));
            
            BmpHandlerCopy copy = new BmpHandlerCopy("converted-"+nameImage + ".bmp");
            copy.readFile();
            copy.generateFiles();
            String image = name.replaceAll(".jpg", "");
            String rutaImage = filePath.replaceAll(name, "copy-converted-" + image + ".bmp");
            System.out.println("ruta de la nueva imagen " + rutaImage);
            BufferedImage bmpImage = ImageIO.read(new File(rutaImage));
            ImageIO.write(bmpImage, "jpeg", new File(rutaImage.replaceAll(".bmp", ".jpg")));
        }catch(Exception ex){
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        //rojo
        BufferedImage imagen = null;
        try {
            imagen = ImageIO.read(new File(filePath));
             int width = imagen.getWidth();
      int height = imagen.getHeight();
      
      // Iterar sobre cada píxel de la imagen y modificar su valor de rojo
      for (int y = 0; y < height; y++) {
         for (int x = 0; x < width; x++) {
            Color color = new Color(imagen.getRGB(x, y));
            int red = color.getRed();
            int green = color.getGreen();
            int blue = color.getBlue();
            Color nuevoColor = new Color(red, 0, 0);
            imagen.setRGB(x, y, nuevoColor.getRGB());
         }
      }
      
      // Guardar la imagen en formato JPEG
      File archivoRojo = new File(filePath+ "ejemplo_rojo.jpg");
      try {
         ImageIO.write(imagen, "jpeg", archivoRojo);
         System.out.println("Imagen guardada correctamente.");
      } catch (IOException e) {
         System.out.println("Error al guardar la imagen.");
         return;
      }
        } catch (IOException ex) {
            Logger.getLogger(editor.class.getName()).log(Level.SEVERE, null, ex);
        }
        //verde
        imagen = null;
        try {
            imagen = ImageIO.read(new File(filePath));
             int width = imagen.getWidth();
      int height = imagen.getHeight();
      
      // Iterar sobre cada píxel de la imagen y modificar su valor de verde
       for (int y = 0; y < height; y++) {
         for (int x = 0; x < width; x++) {
            Color color = new Color(imagen.getRGB(x, y));
            int red = color.getRed();
            int green = color.getGreen();
            int blue = color.getBlue();
            Color nuevoColor = new Color(0, green, 0);
            imagen.setRGB(x, y, nuevoColor.getRGB());
         }
      }
      
      // Guardar la imagen en formato JPEG
      File archivoRojo = new File(filePath+ "ejemplo_verde.jpg");
      try {
         ImageIO.write(imagen, "jpeg", archivoRojo);
         System.out.println("Imagen guardada correctamente.");
      } catch (IOException e) {
         System.out.println("Error al guardar la imagen.");
         return;
      }
        } catch (IOException ex) {
            Logger.getLogger(editor.class.getName()).log(Level.SEVERE, null, ex);
        }
        //azul
        imagen = null;
        try {
            imagen = ImageIO.read(new File(filePath));
             int width = imagen.getWidth();
      int height = imagen.getHeight();
      
      // Iterar sobre cada píxel de la imagen y modificar su valor de azul
       for (int y = 0; y < height; y++) {
         for (int x = 0; x < width; x++) {
            Color color = new Color(imagen.getRGB(x, y));
            int red = color.getRed();
            int green = color.getGreen();
            int blue = color.getBlue();
            Color nuevoColor = new Color(0, 0, blue);
            imagen.setRGB(x, y, nuevoColor.getRGB());
         }
      }
      
      // Guardar la imagen en formato JPEG
      File archivoRojo = new File(filePath+ "ejemplo_azul.jpg");
      try {
         ImageIO.write(imagen, "jpeg", archivoRojo);
         System.out.println("Imagen guardada correctamente.");
      } catch (IOException e) {
         System.out.println("Error al guardar la imagen.");
         return;
      }
        } catch (IOException ex) {
            Logger.getLogger(editor.class.getName()).log(Level.SEVERE, null, ex);
        }
        //sepia
        imagen = null;
        try {
            imagen = ImageIO.read(new File(filePath));
             int width = imagen.getWidth();
      int height = imagen.getHeight();
      
      // Iterar sobre cada píxel de la imagen y modificar sus valores de rojo, verde y azul
      for (int y = 0; y < height; y++) {
         for (int x = 0; x < width; x++) {
            Color color = new Color(imagen.getRGB(x, y));
            int red = color.getRed();
            int green = color.getGreen();
            int blue = color.getBlue();
            int nuevoRed = (int) (red * 0.393 + green * 0.769 + blue * 0.189);
            int nuevoGreen = (int) (red * 0.349 + green * 0.686 + blue * 0.168);
            int nuevoBlue = (int) (red * 0.272 + green * 0.534 + blue * 0.131);
            if (nuevoRed > 255) {
               nuevoRed = 255;
            }
            if (nuevoGreen > 255) {
               nuevoGreen = 255;
            }
            if (nuevoBlue > 255) {
               nuevoBlue = 255;
            }
            Color nuevoColor = new Color(nuevoRed, nuevoGreen, nuevoBlue);
            imagen.setRGB(x, y, nuevoColor.getRGB());
         }
      }
      
      // Guardar la imagen en formato JPEG
      File archivoRojo = new File(filePath+ "ejemplo_serpie.jpg");
      try {
         ImageIO.write(imagen, "jpeg", archivoRojo);
         System.out.println("Imagen guardada correctamente.");
      } catch (IOException e) {
         System.out.println("Error al guardar la imagen.");
         return;
      }
        } catch (IOException ex) {
            Logger.getLogger(editor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        BufferedImage imagen = null;
        try {
            imagen = ImageIO.read(new File(filePath));
             int width = imagen.getWidth();
      int height = imagen.getHeight();
      
       // Iterar sobre cada píxel de la imagen y voltear la imagen horizontalmente
      for (int y = 0; y < height; y++) {
         for (int x = 0; x < width / 2; x++) {
            int pixelActual = imagen.getRGB(x, y);
            int pixelOpuesto = imagen.getRGB(width - x - 1, y);
            imagen.setRGB(x, y, pixelOpuesto);
            imagen.setRGB(width - x - 1, y, pixelActual);
         }
      }
      
      // Guardar la imagen en formato JPEG
      File archivoRojo = new File(filePath + "convert_horizontal.jpg");
      try {
         ImageIO.write(imagen, "jpeg", archivoRojo);
         System.out.println("Imagen guardada correctamente.");
      } catch (IOException e) {
         System.out.println("Error al guardar la imagen.");
         return;
      }
        } catch (IOException ex) {
            Logger.getLogger(editor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        imagen = null;
        try {
            imagen = ImageIO.read(new File(filePath));
             int width = imagen.getWidth();
      int height = imagen.getHeight();
      
       // Iterar sobre cada píxel de la imagen y voltear la imagen verticalmente
      for (int y = 0; y < height / 2; y++) {
         for (int x = 0; x < width; x++) {
            int pixelActual = imagen.getRGB(x, y);
            int pixelOpuesto = imagen.getRGB(x, height - y - 1);
            imagen.setRGB(x, y, pixelOpuesto);
            imagen.setRGB(x, height - y - 1, pixelActual);
         }
      }
      
      // Guardar la imagen en formato JPEG
      File archivoRojo = new File(filePath + "convert_vertical.jpg");
      try {
         ImageIO.write(imagen, "jpeg", archivoRojo);
         System.out.println("Imagen guardada correctamente.");
      } catch (IOException e) {
         System.out.println("Error al guardar la imagen.");
         return;
      }
        } catch (IOException ex) {
            Logger.getLogger(editor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        JPEGImageHandlerBN handlerBn = new JPEGImageHandlerBN(filePath);
        try {
            JPEGHandler.runHandler(handlerBn);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
